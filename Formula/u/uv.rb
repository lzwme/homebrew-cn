class Uv < Formula
  desc "Extremely fast Python package installer and resolver, written in Rust"
  homepage "https:github.comastral-shuv"
  url "https:github.comastral-shuvarchiverefstags0.2.4.tar.gz"
  sha256 "67950118f8a5132f5e72bb80b1770790c12e79ace6492f379018d1d409bb9204"
  license any_of: ["Apache-2.0", "MIT"]
  head "https:github.comastral-shuv.git", branch: "main"

  bottle do
    sha256 cellar: :any,                 arm64_sonoma:   "8779c89b58155d5a29bb0e2dbb7abcc1000bb3c2a64d918ecb32b6fee4510f84"
    sha256 cellar: :any,                 arm64_ventura:  "ebff001b3064f3fa01dce40058cf15107b4479af31cae955bae44d1540ac9389"
    sha256 cellar: :any,                 arm64_monterey: "44c1a1efd343704ee3bdfd1d59f616c69449b39c8e70753d172ae31a71c5284f"
    sha256 cellar: :any,                 sonoma:         "79a7ce0f558e6ef160c116e3c71d670eadda58f12c9265103094e2f6ef85e826"
    sha256 cellar: :any,                 ventura:        "76bbab648479dd66d6f62233e20f822a5afb9c0c0be2b05a897781639bb74941"
    sha256 cellar: :any,                 monterey:       "56c7fed7db594a5a0d533b713bf07de9d85ed03377cf19d17b4ddb2f5ec9ce38"
    sha256 cellar: :any_skip_relocation, x86_64_linux:   "dd842669ecbe1532a36466dfe6bf84ba05a4b71b871157afb72ef8b1b40f5a22"
  end

  depends_on "pkg-config" => :build
  depends_on "rust" => :build
  depends_on "libgit2"
  depends_on "openssl@3"

  uses_from_macos "python" => :test

  on_linux do
    # On macOS, bzip2-sys will use the bundled lib as it cannot find the system or brew lib.
    # We only ship bzip2.pc on Linux which bzip2-sys needs to find library.
    depends_on "bzip2"
  end

  def install
    ENV["LIBGIT2_NO_VENDOR"] = "1"

    # Ensure that the `openssl` crate picks up the intended library.
    ENV["OPENSSL_DIR"] = Formula["openssl@3"].opt_prefix
    ENV["OPENSSL_NO_VENDOR"] = "1"

    system "cargo", "install", "--no-default-features", *std_cargo_args(path: "cratesuv")
    generate_completions_from_executable(bin"uv", "generate-shell-completion")
  end

  def check_binary_linkage(binary, library)
    binary.dynamically_linked_libraries.any? do |dll|
      next false unless dll.start_with?(HOMEBREW_PREFIX.to_s)

      File.realpath(dll) == File.realpath(library)
    end
  end

  test do
    (testpath"requirements.in").write <<~EOS
      requests
    EOS

    compiled = shell_output("#{bin}uv pip compile -q requirements.in")
    assert_match "This file was autogenerated by uv", compiled
    assert_match "# via requests", compiled

    [
      Formula["libgit2"].opt_libshared_library("libgit2"),
      Formula["openssl@3"].opt_libshared_library("libssl"),
      Formula["openssl@3"].opt_libshared_library("libcrypto"),
    ].each do |library|
      assert check_binary_linkage(bin"uv", library),
             "No linkage with #{library.basename}! Cargo is likely using a vendored version."
    end
  end
end