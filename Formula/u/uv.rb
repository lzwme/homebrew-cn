class Uv < Formula
  desc "Extremely fast Python package installer and resolver, written in Rust"
  homepage "https:github.comastral-shuv"
  url "https:github.comastral-shuvarchiverefstags0.2.2.tar.gz"
  sha256 "23a6b94ab9c67a38384904122415eb025a73b344b334d54140b8119b113eae51"
  license any_of: ["Apache-2.0", "MIT"]
  head "https:github.comastral-shuv.git", branch: "main"

  bottle do
    sha256 cellar: :any,                 arm64_sonoma:   "77cc0f33ff5350ae9248c983c6e1fc0506447348b020bf7226f68faf509ef44c"
    sha256 cellar: :any,                 arm64_ventura:  "4990b59934801817fa1fc89905ddc9617063fd1444c0d9890cc6d37158732e59"
    sha256 cellar: :any,                 arm64_monterey: "0a96a1540191b2e848cd193578840340ecf66690741e9d1ce6530065297c3bc5"
    sha256 cellar: :any,                 sonoma:         "d11b2c8863fea55671ce7dfad10ffbfd64c6eb32fbe30e9cfa10a13311fdbdd5"
    sha256 cellar: :any,                 ventura:        "a65d4c957505ed55cfb293bb2544aa1493e9e9dfa6818965bf8b6cb99a95baee"
    sha256 cellar: :any,                 monterey:       "2c0f8c538d763f40c9feb243adb0a7282bb07fccbeadc0c0c3ffb1340f6e644d"
    sha256 cellar: :any_skip_relocation, x86_64_linux:   "10094e20ac3b17823dd712cc49b191ce275ce382564e6c096444064767ba3e18"
  end

  depends_on "pkg-config" => :build
  depends_on "rust" => :build
  depends_on "libgit2"
  depends_on "openssl@3"

  uses_from_macos "python" => :test

  on_linux do
    # On macOS, bzip2-sys will use the bundled lib as it cannot find the system or brew lib.
    # We only ship bzip2.pc on Linux which bzip2-sys needs to find library.
    depends_on "bzip2"
  end

  def install
    ENV["LIBGIT2_NO_VENDOR"] = "1"

    # Ensure that the `openssl` crate picks up the intended library.
    ENV["OPENSSL_DIR"] = Formula["openssl@3"].opt_prefix
    ENV["OPENSSL_NO_VENDOR"] = "1"

    system "cargo", "install", "--no-default-features", *std_cargo_args(path: "cratesuv")
    generate_completions_from_executable(bin"uv", "generate-shell-completion")
  end

  def check_binary_linkage(binary, library)
    binary.dynamically_linked_libraries.any? do |dll|
      next false unless dll.start_with?(HOMEBREW_PREFIX.to_s)

      File.realpath(dll) == File.realpath(library)
    end
  end

  test do
    (testpath"requirements.in").write <<~EOS
      requests
    EOS

    compiled = shell_output("#{bin}uv pip compile -q requirements.in")
    assert_match "This file was autogenerated by uv", compiled
    assert_match "# via requests", compiled

    [
      Formula["libgit2"].opt_libshared_library("libgit2"),
      Formula["openssl@3"].opt_libshared_library("libssl"),
      Formula["openssl@3"].opt_libshared_library("libcrypto"),
    ].each do |library|
      assert check_binary_linkage(bin"uv", library),
             "No linkage with #{library.basename}! Cargo is likely using a vendored version."
    end
  end
end