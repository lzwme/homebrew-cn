class Uv < Formula
  desc "Extremely fast Python package installer and resolver, written in Rust"
  homepage "https:github.comastral-shuv"
  url "https:github.comastral-shuvarchiverefstags0.2.3.tar.gz"
  sha256 "1e953047ae5a312f84ef0a8dc941d412cb3ca382a0c1275cb47b2146af0296b8"
  license any_of: ["Apache-2.0", "MIT"]
  head "https:github.comastral-shuv.git", branch: "main"

  bottle do
    sha256 cellar: :any,                 arm64_sonoma:   "58fef622fe082953da0fd6a862ddeeac2b17264041e001b2e2cc8e5d9af9f4a7"
    sha256 cellar: :any,                 arm64_ventura:  "7eb8a4502726174b593cd583e40e9ba78e622598013d75d8ddfb02c6e6c101fa"
    sha256 cellar: :any,                 arm64_monterey: "d5610d1cc15be1a7a00e5ab615ec5b99c6ac9b4cbd3672a2f486b35dde3eeb57"
    sha256 cellar: :any,                 sonoma:         "e2fad918fc3a8c01fdc1c8a67443abecc0b1ba2f43248b4bcff22116d289c83b"
    sha256 cellar: :any,                 ventura:        "32d7d23f7e5d386e32e345115605f412bce4012be49b215efd860d9b6ec637db"
    sha256 cellar: :any,                 monterey:       "3f9b01ce3cbf6a2839e8e313b9283f4b27f65917f0fc2f26c9a91c0448f19897"
    sha256 cellar: :any_skip_relocation, x86_64_linux:   "348022964c39b6c4f7358ddd07b27299a1d4532dc2307a3daae3fff64e1d61c1"
  end

  depends_on "pkg-config" => :build
  depends_on "rust" => :build
  depends_on "libgit2"
  depends_on "openssl@3"

  uses_from_macos "python" => :test

  on_linux do
    # On macOS, bzip2-sys will use the bundled lib as it cannot find the system or brew lib.
    # We only ship bzip2.pc on Linux which bzip2-sys needs to find library.
    depends_on "bzip2"
  end

  def install
    ENV["LIBGIT2_NO_VENDOR"] = "1"

    # Ensure that the `openssl` crate picks up the intended library.
    ENV["OPENSSL_DIR"] = Formula["openssl@3"].opt_prefix
    ENV["OPENSSL_NO_VENDOR"] = "1"

    system "cargo", "install", "--no-default-features", *std_cargo_args(path: "cratesuv")
    generate_completions_from_executable(bin"uv", "generate-shell-completion")
  end

  def check_binary_linkage(binary, library)
    binary.dynamically_linked_libraries.any? do |dll|
      next false unless dll.start_with?(HOMEBREW_PREFIX.to_s)

      File.realpath(dll) == File.realpath(library)
    end
  end

  test do
    (testpath"requirements.in").write <<~EOS
      requests
    EOS

    compiled = shell_output("#{bin}uv pip compile -q requirements.in")
    assert_match "This file was autogenerated by uv", compiled
    assert_match "# via requests", compiled

    [
      Formula["libgit2"].opt_libshared_library("libgit2"),
      Formula["openssl@3"].opt_libshared_library("libssl"),
      Formula["openssl@3"].opt_libshared_library("libcrypto"),
    ].each do |library|
      assert check_binary_linkage(bin"uv", library),
             "No linkage with #{library.basename}! Cargo is likely using a vendored version."
    end
  end
end