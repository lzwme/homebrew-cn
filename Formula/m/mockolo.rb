class Mockolo < Formula
  desc "Efficient Mock Generator for Swift"
  homepage "https:github.comubermockolo"
  url "https:github.comubermockoloarchiverefstags2.3.0.tar.gz"
  sha256 "af978fdafe12502962b8ff82f888d003718a7c6307e375f85ed3b5b56a21f5b4"
  license "Apache-2.0"

  bottle do
    sha256 cellar: :any_skip_relocation, arm64_sequoia: "423a9cbf73963abb378ffe583100d5656a2d900fa94bb709dbd20f0e9fe129d4"
    sha256 cellar: :any_skip_relocation, arm64_sonoma:  "10bb4abb22eea3e56c5f9cb2981f66111a3a934ebe97bde368573097419f2ce8"
    sha256 cellar: :any_skip_relocation, sonoma:        "c2061ed9b5348e2c2bfbf58b7e26e0945635d742b031386e7020a281897f7518"
    sha256 cellar: :any_skip_relocation, x86_64_linux:  "45d0e1c2070c81438b016dd1e7df1b3304b6d41fb5490a696dad54b01034a998"
  end

  depends_on xcode: ["15.3", :build]

  uses_from_macos "swift" => :build

  def install
    args = if OS.mac?
      ["--disable-sandbox"]
    else
      ["--static-swift-stdlib"]
    end
    system "swift", "build", *args, "-c", "release", "--product", "mockolo"
    bin.install ".buildreleasemockolo"
  end

  test do
    (testpath"testfile.swift").write <<~SWIFT
       @mockable
      public protocol Foo {
          var num: Int { get set }
          func bar(arg: Float) -> String
      }
    SWIFT
    system bin"mockolo", "-srcs", testpath"testfile.swift", "-d", testpath"GeneratedMocks.swift"
    assert_path_exists testpath"GeneratedMocks.swift"
    output = <<~SWIFT.gsub(\s+, "").strip
      
       @Generated by Mockolo
      
      public class FooMock: Foo {
        public init() { }
        public init(num: Int = 0) {
            self.num = num
        }

        public private(set) var numSetCallCount = 0
        public var num: Int = 0 { didSet { numSetCallCount += 1 } }

        public private(set) var barCallCount = 0
        public var barHandler: ((Float) -> String)?
        public func bar(arg: Float) -> String {
            barCallCount += 1
            if let barHandler = barHandler {
                return barHandler(arg)
            }
            return ""
        }
      }
    SWIFT
    assert_equal output, shell_output("cat #{testpath"GeneratedMocks.swift"}").gsub(\s+, "").strip
  end
end