class Libadwaita < Formula
  desc "Building blocks for modern adaptive GNOME applications"
  homepage "https://gnome.pages.gitlab.gnome.org/libadwaita/"
  url "https://download.gnome.org/sources/libadwaita/1.4/libadwaita-1.4.0.tar.xz"
  sha256 "e51a098a54d43568218fc48fcf52e80e36f469b3ce912d8ce9c308a37e9f47c2"
  license "LGPL-2.1-or-later"
  revision 1

  # libadwaita doesn't use GNOME's "even-numbered minor is stable" version
  # scheme. This regex is the same as the one generated by the `Gnome` strategy
  # but it's necessary to avoid the related version scheme logic.
  livecheck do
    url :stable
    regex(/libadwaita-(\d+(?:\.\d+)+)\.t/i)
  end

  bottle do
    sha256 arm64_sonoma:   "e1559b512441394ecf464a0f4d1515beeae56f3387e6b54e7de3c750fce6b52e"
    sha256 arm64_ventura:  "4904eb43384a6d1d28a7d607b17f5c098a2571053d8db25933543f3eac506313"
    sha256 arm64_monterey: "bad6be52748f7c2cde4c72743c18b0ba6be2194841b4a838ae2d88a322a5b3dc"
    sha256 sonoma:         "cce489a72a26cad4453c9c0af229837d102869b12b7cfc0689172e273fe327ca"
    sha256 ventura:        "c344d29e6c7fddef021791c0cb1ad4e34bc3c7d1ef6560a2e23d4d76eaa53b2e"
    sha256 monterey:       "0ef04a47bd610debc1f328678210287d9ef0413ba4f1ba89b9db2f800288217b"
    sha256 x86_64_linux:   "11370a2a350ed986b03ce0daa1fa6558826223bd642d6594f6a75c10a344693d"
  end

  depends_on "cmake" => :build
  depends_on "gettext" => :build
  depends_on "gobject-introspection" => :build
  depends_on "meson" => :build
  depends_on "ninja" => :build
  depends_on "pkg-config" => [:build, :test]
  depends_on "vala" => :build
  depends_on "appstream"
  depends_on "gtk4"

  uses_from_macos "python" => :build

  # upstream patch ref, https://gitlab.gnome.org/GNOME/libadwaita/-/commit/3e3967d5f69180644519936991cad10136e84ca9
  patch :DATA

  def install
    system "meson", "setup", "build", "-Dtests=false", *std_meson_args
    system "meson", "compile", "-C", "build", "--verbose"
    system "meson", "install", "-C", "build"
  end

  test do
    (testpath/"test.c").write <<~EOS
      #include <adwaita.h>

      int main(int argc, char *argv[]) {
        g_autoptr (AdwApplication) app = NULL;
        app = adw_application_new ("org.example.Hello", G_APPLICATION_DEFAULT_FLAGS);
        return g_application_run (G_APPLICATION (app), argc, argv);
      }
    EOS
    flags = shell_output("#{Formula["pkg-config"].opt_bin}/pkg-config --cflags --libs libadwaita-1").strip.split
    system ENV.cc, "test.c", "-o", "test", *flags
    system "./test", "--help"

    # include a version check for the pkg-config files
    assert_match version.to_s, (lib/"pkgconfig/libadwaita-1.pc").read
  end
end

__END__
diff --git a/src/adw-about-window.c b/src/adw-about-window.c
index e861dcd..6ddbd5b 100644
--- a/src/adw-about-window.c
+++ b/src/adw-about-window.c
@@ -1957,10 +1957,11 @@ adw_about_window_new_from_appdata (const char *resource_path,
   GFile *appdata_file;
   char *appdata_uri;
   AsMetadata *metadata;
-  GPtrArray *releases;
+  AsReleaseList *releases;
+  AsDeveloper *developer;
   AsComponent *component;
   char *application_id;
-  const char *name, *developer_name, *project_license;
+  const char *name, *project_license;
   const char *issue_url, *support_url, *website_url;
   GError *error = NULL;

@@ -2004,7 +2005,7 @@ adw_about_window_new_from_appdata (const char *resource_path,
     g_free (appid_desktop);
   }

-  releases = as_component_get_releases (component);
+  releases = as_component_get_releases_plain (component);

   if (release_notes_version) {
     guint release_index = 0;
@@ -2015,7 +2016,7 @@ adw_about_window_new_from_appdata (const char *resource_path,
       AsRelease *notes_release;
       const char *release_notes, *version;

-      notes_release = g_ptr_array_index (releases, release_index);
+      notes_release = as_release_list_index (releases, release_index);

       release_notes = as_release_get_description (notes_release);
       version = as_release_get_version (notes_release);
@@ -2029,8 +2030,8 @@ adw_about_window_new_from_appdata (const char *resource_path,
     }
   }

-  if (releases->len > 0) {
-    AsRelease *latest_release = g_ptr_array_index (releases, 0);
+  if (as_release_list_len(releases) > 0) {
+    AsRelease *latest_release = as_release_list_index (releases, 0);
     const char *version = as_release_get_version (latest_release);

     if (version)
@@ -2038,7 +2039,7 @@ adw_about_window_new_from_appdata (const char *resource_path,
   }

   name = as_component_get_name (component);
-  developer_name = as_component_get_developer_name (component);
+  developer = as_component_get_developer (component);
   project_license = as_component_get_project_license (component);
   issue_url = as_component_get_url (component, AS_URL_KIND_BUGTRACKER);
   support_url = as_component_get_url (component, AS_URL_KIND_HELP);
@@ -2049,8 +2050,8 @@ adw_about_window_new_from_appdata (const char *resource_path,
   if (name)
     adw_about_window_set_application_name (self, name);

-  if (developer_name)
-    adw_about_window_set_developer_name (self, developer_name);
+  if (developer)
+    adw_about_window_set_developer_name (self, as_developer_get_name (developer));

   if (project_license) {
     int i;