class Mockolo < Formula
  desc "Efficient Mock Generator for Swift"
  homepage "https://github.com/uber/mockolo"
  url "https://ghproxy.com/https://github.com/uber/mockolo/archive/refs/tags/2.0.0.tar.gz"
  sha256 "ec5a4852012f511d430e9207f141a548374b36c39ee46c9878360d2fa400246b"
  license "Apache-2.0"

  bottle do
    sha256 cellar: :any_skip_relocation, arm64_ventura:  "643d947d983835c196f2aec33c4a42c29c4fbdde1d6885a1e22b25469e75810d"
    sha256 cellar: :any_skip_relocation, arm64_monterey: "9d7f5edb25a17329b7150111afcd0e7466af9c3e1479a91212a40cdcc0ce7d18"
    sha256 cellar: :any_skip_relocation, ventura:        "06ce3e8d7b4e451aa00793e7b5db700b54eba3748c23bf34a88d2a61fb488139"
    sha256 cellar: :any_skip_relocation, monterey:       "9b39f4fa6c4d734866039abff95646eb559bf1a8ee9d2123e7028924a7eb7ca3"
    sha256                               x86_64_linux:   "01e282f6df57c81eca096580da96abc5f6a6e0afab37c45ea6593cd7c3a07896"
  end

  depends_on xcode: ["14.0", :build]

  uses_from_macos "swift"

  def install
    system "swift", "build", "-c", "release", "--disable-sandbox", "--product", "mockolo"
    bin.install ".build/release/mockolo"
  end

  test do
    (testpath/"testfile.swift").write <<~EOS
      /// @mockable
      public protocol Foo {
          var num: Int { get set }
          func bar(arg: Float) -> String
      }
    EOS
    system "#{bin}/mockolo", "-srcs", testpath/"testfile.swift", "-d", testpath/"GeneratedMocks.swift"
    assert_predicate testpath/"GeneratedMocks.swift", :exist?
    output = <<~EOS.gsub(/\s+/, "").strip
      ///
      /// @Generated by Mockolo
      ///
      public class FooMock: Foo {
        public init() { }
        public init(num: Int = 0) {
            self.num = num
        }

        public private(set) var numSetCallCount = 0
        public var num: Int = 0 { didSet { numSetCallCount += 1 } }

        public private(set) var barCallCount = 0
        public var barHandler: ((Float) -> (String))?
        public func bar(arg: Float) -> String {
            barCallCount += 1
            if let barHandler = barHandler {
                return barHandler(arg)
            }
            return ""
        }
      }
    EOS
    assert_equal output, shell_output("cat #{testpath/"GeneratedMocks.swift"}").gsub(/\s+/, "").strip
  end
end